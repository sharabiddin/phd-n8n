name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Navigate to deployment directory
          cd /opt/phd-n8n || { echo "Creating deployment directory"; mkdir -p /opt/phd-n8n; cd /opt/phd-n8n; }
          
          # Stop existing containers if running
          if [ -f docker-compose.yml ]; then
            docker-compose down
          fi
          
          # Backup existing .env if it exists
          if [ -f .env ]; then
            cp .env .env.backup
          fi
          
          # Remove old files (except .env)
          find . -not -name '.env' -not -name '.env.backup' -not -name 'n8n_data' -not -name 'postgres_data' -type f -delete
          find . -not -name '.env' -not -name '.env.backup' -not -name 'n8n_data' -not -name 'postgres_data' -type d -empty -delete 2>/dev/null || true
          
          # Clone the repository using HTTPS (more reliable for automation)
          git clone https://github.com/${{ github.repository }}.git temp_repo
          
          # Move files from temp repo to current directory
          mv temp_repo/* . 2>/dev/null || true
          mv temp_repo/.* . 2>/dev/null || true
          rm -rf temp_repo
          
          # Restore .env if it was backed up, otherwise create production .env
          if [ -f .env.backup ]; then
            mv .env.backup .env
          elif [ -f .env.production ]; then
            cp .env.production .env
          elif [ -f .env.example ]; then
            cp .env.example .env
            # Update .env for production
            sed -i 's/localhost/phd.sharpy.dev/g' .env
            sed -i 's/http:/https:/g' .env
            sed -i 's/N8N_SECURE_COOKIE=false/N8N_SECURE_COOKIE=true/g' .env
          else
            # Create minimal .env if none exists
            cat > .env << 'ENVEOF'
          N8N_BASIC_AUTH_ACTIVE=true
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=SecurePassword123!
          N8N_HOST=phd.sharpy.dev
          N8N_PORT=5678
          N8N_PROTOCOL=https
          WEBHOOK_URL=https://phd.sharpy.dev/
          N8N_SECURE_COOKIE=true
          N8N_OAUTH_CALLBACK_BASE_URL=https://phd.sharpy.dev/
          N8N_CORS_ORIGIN=*
          N8N_CORS_CREDENTIALS=false
          GENERIC_TIMEZONE=UTC
          DATABASE_TYPE=postgresdb
          DB_POSTGRESDB_DATABASE=n8n
          DB_POSTGRESDB_HOST=postgres
          DB_POSTGRESDB_PORT=5432
          DB_POSTGRESDB_USER=n8n
          DB_POSTGRESDB_PASSWORD=n8n
          DB_POSTGRESDB_SCHEMA=public
          N8N_ENCRYPTION_KEY=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
          N8N_USER_MANAGEMENT_JWT_SECRET=jwt_secret_key_replace_with_random_string
          N8N_TRUST_PROXY=true
          N8N_PROXY_HOPS=1
          N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
          N8N_DISABLE_UI_RATE_LIMITING=true
          N8N_RUNNERS_ENABLED=true
          DB_SQLITE_POOL_SIZE=1
          N8N_BLOCK_ENV_ACCESS_IN_NODE=true
          N8N_GIT_NODE_DISABLE_BARE_REPOS=true
          ENVEOF
          fi
          
          # Install Docker and Docker Compose if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl enable docker
            systemctl start docker
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Set proper SSL certificate permissions
          if [ -f ssl/phd.sharpy.dev.key ]; then
            chmod 600 ssl/phd.sharpy.dev.key
          fi
          
          # Note: nginx runs in Docker container, no system installation needed
          
          # Start the application
          docker-compose up -d
          
          # Wait for containers to be ready
          sleep 10
          
          # Show status
          docker-compose ps
          echo "Deployment completed successfully!"
          echo "n8n should be available at https://phd.sharpy.dev"